def show_menu():
    print("Menu:")
    print("1. Add task")
    print("2. View tasks")
    print("3. Mark task as done")
    print("4. Exit")

def add_task(todo_list):
    task = input("Enter the task: ")
    todo_list.append({"task": task, "done": False})
    print("Task added successfully!")

def view_tasks(todo_list):
    if not todo_list:
        print("No tasks to display.")
    else:
        print("Tasks:")
        for index, task in enumerate(todo_list, start=1):
            status = "Done" if task["done"] else "Pending"
            print(f"{index}. {task['task']} - {status}")

def mark_task_as_done(todo_list):
    if not todo_list:
        print("No tasks to mark as done.")
        return

    view_tasks(todo_list)
    task_index = int(input("Enter the index of the task to mark as done: ")) - 1
    if 0 <= task_index < len(todo_list):
        todo_list[task_index]["done"] = True
        print("Task marked as done.")
    else:
        print("Invalid task index.")

def main():
    todo_list = []

    while True:
        show_menu()
        choice = input("Enter your choice: ")

        if choice == "1":
            add_task(todo_list)
        elif choice == "2":
            view_tasks(todo_list)
        elif choice == "3":
            mark_task_as_done(todo_list)
        elif choice == "4":
            print("Exiting program. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")

if _name_ == "_main_":
    main()
This code provides a simple command-line interface to interact with the to-do list. You can add tasks, view tasks, mark tasks as done, and exit the program.

class ToDoList:
    def _init_(self):
        self.tasks = [1.prepare for exams]

    def add_task(self, task):
        self.tasks.append(task)

    def remove_task(self, task):
        if task in self.tasks:
            self.tasks.remove(task)
        else:
            print("exams preparation complete.")

    def display_tasks(self):
        print("To-Do List:")
        for index, task in enumerate(self.tasks, start=1):
            print(f"{index}. {task}")
